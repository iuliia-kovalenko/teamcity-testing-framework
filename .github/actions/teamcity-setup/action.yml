name: Teamcity Setup

runs:
  using: composite
  steps:
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'

    # По умолчанию в ubuntu отсутствует команда ifconfig
    - name: Install ifconfig
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y net-tools

    - name: Setup host environment variable
      shell: bash
      # Команда для определения ip адреса для обращения из другого контейнера в документации Selenoid UI: https://aerokube.com/selenoid-ui/latest/
      run: |
        echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

    - name: Setup host config property
      shell: bash
      run: echo "host=$HOST:8111" >> src/main/resources/config.properties

    - name: Pull Selenoid browsers
      shell: bash
      # Парсить browsers.json и будем docker pull все браузеры
      run: |
        for browser in $(awk -F'"' '/"image": "/{print $4}' "config/browsers.json"); do
          docker pull $browser
        done

    - name: Run Selenoid
      shell: bash
      # Флаг -d запускает контейнер в фоновом режиме, если этого не сделать, то к следующему степу не перейти
      run: |
        docker run -d --name selenoid \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $(pwd)/config/:/etc/selenoid/:ro \
        -p 4444:4444 \
        aerokube/selenoid:latest-release

    # В этом степе нет смысла запуска на Github Actions, но для локальной отладки с act можно использовать
    - name: Run Seleniod UI
      shell: bash
      run: |
        docker run -d --name selenoid-ui \
        -p 8080:8080 \
        aerokube/selenoid-ui:latest-release \
        --selenoid-uri http://$HOST:4444

    - name: Create Docker network
      shell: bash
      run: docker network create teamcity-net || echo "Network already exists"

    - name: Run Teamcity Server
      shell: bash
      # флаг -u 0 запускает контейнер от имени root, чтобы был доступ к записи файлов в директирии, которые указаны в volume
      run: |
        docker run -u 0 -d --name teamcity-server  \
        -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
        -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs  \
        -p 8111:8111 \
        jetbrains/teamcity-server:2023.11.1

    - name: Setup Teamcity Server
      shell: bash
      run: ./mvnw clean test -Dtest=SetupServerTest#setupTeamcityServerTest

    - name: Setup superUserToken environment variable
      shell: bash
      run: echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV

    - name: Setup superUserToken config property
      shell: bash
      run: echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties

    #    - name: Run Teamcity Agent
    #      shell: bash
    #      run: |
    #        docker run -d --name teamcity-agent-1 \
    #          -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
    #          -e SERVER_URL=http://$HOST:8111 \
    #          jetbrains/teamcity-agent:2023.11.1-linux-sudo

    - name: Run TeamCity Agent
      shell: bash
      run: |
        docker run -u 0 -d --name teamcity-agent \
        -e SERVER_URL=http://$HOST:8111 \
        -e AGENT_NAME=teamcityAgentFirst \
        -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
        jetbrains/teamcity-agent:2023.11.1-linux-sudo

    - name: TeamCity Agent logs
      shell: bash
      run: docker logs teamcity-agent || echo "TeamCity Agent logs not available"

    - name: Wait for TeamCity Agent to connect
      shell: bash
      run: sleep 10

    - name: Setup TeamCity-Agent
      shell: bash
      run: ./mvnw clean test -Dtest=SetupTeamcityAgent#AgentAuthorizeTest